---
## Official nextcloud image version
## ref: https://hub.docker.com/r/library/nextcloud/tags/
##
image:
  repository: nextcloud
  flavor: apache
  # default is generated by flavor and appVersion
  pullPolicy: IfNotPresent
  # pullSecrets:
  #   - myRegistrKeySecretName
# Number of replicas to be deployed
replicaCount: 1  # TODO: set to 3 once redis is enabled
## Allowing use of ingress controllers
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  # className: nginx
  annotations:
    kubernetes.io/tls-acme: 'true'
    cert-manager.io/cluster-issuer: letsencrypt-prod
  tls:
    - secretName: nextcloud-tls
      hosts: [nextcloud.etsmtl.club]
  labels: {}
  path: /
  pathType: Prefix
phpClientHttpsFix:
  enabled: true
  protocol: https
nextcloud:
  host: nextcloud.etsmtl.club
  ## Use an existing secret
  existingSecret:
    enabled: true
    secretName: nextcloud-admin
    usernameKey: nextcloud-username
    passwordKey: nextcloud-password
    tokenKey: 'metrics-token'
    smtpUsernameKey: ''
    smtpPasswordKey: ''
    smtpHostKey: ''
  update: 0
  # If web server is not binding default port, you can define it
  containerPort: 80
  datadir: /var/www/html/data
  persistence:
    subPath:
  # if set, we'll template this list to the NEXTCLOUD_TRUSTED_DOMAINS env var
  trustedDomains: []
  configs:
    users.config.php: |-
      <?php
      $CONFIG = array (
         'skeletondirectory' => ''
         );
    network.config.php: |-
      <?php
      $CONFIG = array (
        'allow_local_remote_servers' => true,
        'trusted_proxies' => array (
          0 => '10.244.0.0/16',
        )
        );
    logging.config.php: |-
      <?php
      $CONFIG = array (
        'log_type' => 'errorlog',
        'logfile' => '/dev/stdout',
        'loglevel' => 0,
        'logdateformat' => 'F d, Y H:i:s'
        );
  ## PHP Configuration files
  # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
  phpConfigs:
    zz-memory_limit.ini: |-
      memory_limit=1G
    apc.ini: |-
      apc.enable_cli=1
      apc.shm_segments=1
      apc.shm_size=128M
      apc.ttl=7200
      apc.user_ttl=7200
      apc.num_files_hint=1024
      # apc.mmap_file_mask=/tmp/apc.XXXXXX
      apc.enable_cli=1
    opcache.ini: |-
      opcache.enable=1
      opcache.enable_cli=1
      opcache.memory_consumption=256
      opcache.interned_strings_buffer=32
      opcache.max_accelerated_files=10000
      opcache.revalidate_freq=30
      opcache.save_comments=1
      opcache.jit = 1255
      opcache.jit_buffer_size = 8M
  ## Default config files that utilize environment variables:
  # see: https://github.com/nextcloud/docker/tree/master#auto-configuration-via-environment-variables
  # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
  # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/.config
  defaultConfigs:
    # To protect /var/www/html/config
    .htaccess: true
    # Apache configuration for rewrite urls
    apache-pretty-urls.config.php: true
    # Define APCu as local cache
    apcu.config.php: true
    # Apps directory configs
    apps.config.php: true
    # Used for auto configure database
    autoconfig.php: true
    # Redis default configuration
    redis.config.php: true
    # Reverse proxy default configuration
    reverse-proxy.config.php: true
    # S3 Object Storage as primary storage
    s3.config.php: true
    # SMTP default configuration via environment variables
    smtp.config.php: true
    # Swift Object Storage as primary storage
    swift.config.php: true
    # disables the web based updater as the default nextcloud docker image does not support it
    upgrade-disable-web.config.php: true
    # -- imaginary support config
    imaginary.config.php: false

  # Extra config files created in /var/www/html/config/
  # ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
  # configs: {}
  # For example, to enable image and text file previews:
  previews.config.php: |-
    <?php
    $CONFIG = array (
      'enable_previews' => true,
      'enabledPreviewProviders' => array (
        'OC\Preview\Movie',
        'OC\Preview\PNG',
        'OC\Preview\JPEG',
        'OC\Preview\GIF',
        'OC\Preview\BMP',
        'OC\Preview\XBitmap',
        'OC\Preview\MP3',
        'OC\Preview\MP4',
        'OC\Preview\TXT',
        'OC\Preview\MarkDown',
        'OC\Preview\PDF'
      ),
    );

  # Hooks for auto configuration
  # Here you could write small scripts which are placed in `/docker-entrypoint-hooks.d/<hook-name>/helm.sh`
  # ref: https://github.com/nextcloud/docker?tab=readme-ov-file#auto-configuration-via-hook-folders
  hooks:
    pre-installation:
    post-installation:
    pre-upgrade:
    post-upgrade:
    before-starting:

  ## Strategy used to replace old pods
  ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy./occ user_oidc:provider -h
  strategy:
    type: Recreate
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 1
    #   maxUnavailable: 0

  ##
  ## Extra environment variables
  extraEnv:
    - name: AUTHENTIK_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: authentik-oidc
          key: client_id
    - name: AUTHENTIK_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: authentik-oidc
          key: client_secret
    - name: AUTHENTIK_CONFIG_URL
      value: https://auth.etsmtl.club/application/o/nextcloud-oidc/.well-known/openid-configuration
internalDatabase:
  enabled: false
##
## External database configuration
##
externalDatabase:
  enabled: true

  ## Supported database engines: mysql or postgresql
  type: postgresql

  ## Database host. You can optionally include a colon delimited port like "myhost:1234"
  host: postgresql-nextcloud-rw.nextcloud.svc.cluster.local

  ## Database name
  database: nextcloud

  ## Use a existing secret
  existingSecret:
    enabled: true
    secretName: nextcloud-postgresql
    usernameKey: username
    passwordKey: password
##
## Redis chart configuration
## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
##
redis:
  enabled: true
  auth:
    enabled: true
    existingSecret: redis-secret
    existingSecretPasswordKey: secret
  master:
    persistence:
      enabled: false
  replica:
    persistence:
      enabled: false
## Cronjob to execute Nextcloud background tasks
## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
##
cronjob:
  enabled: true
  command: [/cron.sh]
service:
  type: ClusterIP
  port: 8080
  loadBalancerIP: ''
  nodePort:
  # -- use additional annotation on service for nextcloud
  annotations: {}
## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  # Nextcloud Data (/var/www/html)
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: nextcloud-pvc

  # annotations: {}
  ## nextcloud data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: 'cephfs'

  # accessMode: ReadWriteOnce
  # size: 8Gi

  ## Use an additional pvc for the data directory rather than a subpath of the default PVC
  ## Useful to store data on a different storageClass (e.g. on slower disks)
  nextcloudData:
    enabled: false
    # subPath:
    # annotations: {}
    # storageClass: "-"
    # existingClaim:
    # accessMode: ReadWriteOnce
    # size: 8Gi
resources:
  requests:
    memory: 10Gi
    cpu: 1500m
  limits:
    memory: 30Gi
    cpu: 5000m
## Liveness and readiness probe values
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
startupProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1
## Enable pod autoscaling using HorizontalPodAutoscaler
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
##
hpa:
  enabled: false
  cputhreshold: 60
  minPods: 1
  maxPods: 10
nodeSelector: {}
tolerations: []
affinity: {}
dnsConfig: {}
# Custom dns config for Nextcloud containers.
# You can for example configure ndots. This may be needed in some clusters with alpine images.
# options:
#   - name: ndots
#     value: "1"
imaginary:
  # -- Start Imgaginary
  enabled: false
  # -- Number of imaginary pod replicas to deploy
  replicaCount: 1
  image:
    # -- Imaginary image registry
    registry: docker.io
    # -- Imaginary image name
    repository: h2non/imaginary
    # -- Imaginary image tag
    tag: 1.2.4
    # -- Imaginary image pull policy
    pullPolicy: IfNotPresent
    # -- Imaginary image pull secrets
    pullSecrets: []

  # -- Additional annotations for imaginary
  podAnnotations: {}
  # -- Additional labels for imaginary
  podLabels: {}
  # -- Imaginary pod nodeSelector
  nodeSelector: {}
  # -- Imaginary pod tolerations
  tolerations: []

  # -- imaginary resources
  resources: {}

  # -- Optional security context for the Imaginary container
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #     - ALL

  # -- Optional security context for the Imaginary pod (applies to all containers in the pod)
  podSecurityContext: {}
  # runAsNonRoot: true
  # seccompProfile:
  #   type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 3
    successThreshold: 1
    periodSeconds: 10
    timeoutSeconds: 1
  livenessProbe:
    enabled: true
    failureThreshold: 3
    successThreshold: 1
    periodSeconds: 10
    timeoutSeconds: 1
  service:
    # -- Imaginary: Kubernetes Service type
    type: ClusterIP
    # -- Imaginary: LoadBalancerIp for service type LoadBalancer
    loadBalancerIP:
    # -- Imaginary: NodePort for service type NodePort
    nodePort:
    # -- Additional annotations for service imaginary
    annotations: {}
    # -- Additional labels for service imaginary
    labels: {}
## Prometheus Exporter / Metrics
##
metrics:
  enabled: true
  replicaCount: 1
  # Optional: becomes NEXTCLOUD_SERVER env var in the nextcloud-exporter container.
  # Without it, we will use the full name of the nextcloud service
  server: ''
  # The metrics exporter needs to know how you serve Nextcloud either http or https
  https: false
  # Use API token if set, otherwise fall back to password authentication
  # https://github.com/xperimental/nextcloud-exporter#token-authentication
  # Currently you still need to set the token manually in your nextcloud install
  token: ''
  timeout: 5s
  # if set to true, exporter skips certificate verification of Nextcloud server.
  tlsSkipVerify: false
  info:
    # Optional: becomes NEXTCLOUD_INFO_APPS env var in the nextcloud-exporter container.
    # Enables gathering of apps-related metrics. Defaults to false
    apps: true
  image:
    repository: xperimental/nextcloud-exporter
    tag: 0.6.2
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistrKeySecretName

  ## Metrics exporter resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}

  # -- Metrics exporter pod Annotation
  podAnnotations: {}

  # -- Metrics exporter pod Labels
  podLabels: {}

  # -- Metrics exporter pod nodeSelector
  nodeSelector: {}

  # -- Metrics exporter pod tolerations
  tolerations: []

  # -- Metrics exporter pod affinity
  affinity: {}
  service:
    type: ClusterIP
    # Use serviceLoadBalancerIP to request a specific static IP,
    # otherwise leave blank
    loadBalancerIP:
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port: '9205'
    labels: {}

  # -- security context for the metrics CONTAINER in the pod
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #     - ALL

  # -- security context for the metrics POD
  podSecurityContext: {}
  # runAsNonRoot: true
  # seccompProfile:
  #   type: RuntimeDefault

  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false

    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
    ##
    namespace: ''

    ## @param metrics.serviceMonitor.namespaceSelector The selector of the namespace where the target service is located (defaults to the release namespace)
    namespaceSelector:

    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
    ##
    jobLabel: ''

    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    interval: 30s

    ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    scrapeTimeout: ''

    ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
    ##
    labels: {}
rbac:
  enabled: false
  serviceaccount:
    create: true
    name: nextcloud-serviceaccount
    annotations: {}
## @param securityContext for nextcloud pod @deprecated Use `nextcloud.podSecurityContext` instead
securityContext: {}
